# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# CI docker arm env
# tag: v0.02

FROM ubuntu:22.04

COPY utils/apt-install-and-clear.sh /usr/local/bin/apt-install-and-clear

RUN echo "Acquire::Check-Valid-Until \"false\";\nAcquire::Check-Date \"false\";" > /etc/apt/apt.conf.d/10no--check-valid-until

RUN apt-get update --fix-missing

RUN apt-install-and-clear -y ca-certificates gnupg2

COPY install/ubuntu_setup_tz.sh /install/ubuntu_setup_tz.sh
RUN bash /install/ubuntu_setup_tz.sh

COPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh
RUN bash /install/ubuntu_install_core.sh

COPY install/ubuntu_install_cmake_source.sh /install/ubuntu_install_cmake_source.sh
RUN bash /install/ubuntu_install_cmake_source.sh

COPY install/ubuntu_install_googletest.sh /install/ubuntu_install_googletest.sh
RUN bash /install/ubuntu_install_googletest.sh

# Rust env
COPY install/ubuntu_install_rust.sh /install/ubuntu_install_rust.sh
RUN bash /install/ubuntu_install_rust.sh
ENV RUSTUP_HOME /opt/rust
ENV CARGO_HOME /opt/rust
ENV PATH $PATH:$CARGO_HOME/bin

# sccache
COPY install/ubuntu_install_sccache.sh /install/ubuntu_install_sccache.sh
RUN bash /install/ubuntu_install_sccache.sh
ENV PATH /opt/sccache:$PATH

# Install specific LLVM version
RUN apt-install-and-clear -y wget xz-utils && \
    LLVM_VERSION=14.0.0 && \
    LLVM_REL=clang+llvm-${LLVM_VERSION}-aarch64-linux-gnu && \
    LLVM_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/${LLVM_REL}.tar.xz && \
    wget --quiet ${LLVM_URL} && \
    tar -xJf ${LLVM_REL}.tar.xz && \
    mv ${LLVM_REL} /opt/llvm && \
    rm ${LLVM_REL}.tar.xz

ENV PATH=/opt/llvm/bin:$PATH

# install arm-gcc compiler
RUN apt-get update && apt-get install -y wget && \
    COMPILER_URL="https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu.tar.xz" && \
    wget -q ${COMPILER_URL} -O /tmp/gcc-arm-compiler.tar.xz && \
    mkdir -p /opt/gcc-arm-compiler && \
    tar -xf /tmp/gcc-arm-compiler.tar.xz -C /opt/gcc-arm-compiler --strip-components=1 && \
    rm /tmp/gcc-arm-compiler.tar.xz

ENV PATH=/opt/gcc-arm-compiler/bin:$PATH


ENV TVM_VENV /venv/apache-tvm-py3.9
COPY python/bootstrap/lockfiles /install/python/bootstrap/lockfiles
COPY install/ubuntu_install_python.sh /install/ubuntu_install_python.sh
RUN bash /install/ubuntu_install_python.sh 3.9
ENV PATH ${TVM_VENV}/bin:$PATH
ENV PYTHONNOUSERSITE 1  # Disable .local directory from affecting CI.

COPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh
RUN bash /install/ubuntu_install_python_package.sh

# TensorFlow deps
COPY install/ubuntu_install_tensorflow_aarch64.sh /install/ubuntu_install_tensorflow_aarch64.sh
RUN bash /install/ubuntu_install_tensorflow_aarch64.sh

# TFLite deps
COPY install/ubuntu_install_tflite.sh /install/ubuntu_install_tflite.sh
RUN bash /install/ubuntu_install_tflite.sh

# ONNX
COPY install/ubuntu_install_onnx.sh /install/ubuntu_install_onnx.sh
RUN bash /install/ubuntu_install_onnx.sh

# AutoTVM deps
COPY install/ubuntu_install_redis.sh /install/ubuntu_install_redis.sh
RUN bash /install/ubuntu_install_redis.sh

# Arm(R) Compute Library
COPY install/ubuntu_download_arm_compute_lib_binaries.sh /install/ubuntu_download_arm_compute_lib_binaries.sh
RUN bash /install/ubuntu_download_arm_compute_lib_binaries.sh

# Ethos-n driver
RUN apt-get update && apt-get install -y scons
COPY ethos-n-driver-stack /tmp/ethos-n-driver-stack

RUN cd /tmp/ethos-n-driver-stack/driver && \
    scons -j$(nproc) platform=native install_prefix=/usr/local/ethos-n install && \
    cd / && \
    rm -rf /tmp/ethos-n-driver-stack

RUN rm -rf /tmp/ethos-n-driver-stack

ENV LD_LIBRARY_PATH /usr/local/ethos-n/lib:$LD_LIBRARY_PATH